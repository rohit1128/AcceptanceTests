// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GrosvenorDevQuiz.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class GrosvenorDevQuizFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GrosvenorDevQuiz.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GrosvenorDevQuiz", "In order to prove that the cooking ticket\r\nconsole application works the followin" +
                    "g \r\nacceptance tests must pass", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "GrosvenorDevQuiz")))
            {
                GrosvenorDevQuiz.Specs.GrosvenorDevQuizFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Given an order is made with valid dish selections the order should process correc" +
            "tly without error")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GrosvenorDevQuiz")]
        public virtual void GivenAnOrderIsMadeWithValidDishSelectionsTheOrderShouldProcessCorrectlyWithoutError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given an order is made with valid dish selections the order should process correc" +
                    "tly without error", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input"});
            table1.AddRow(new string[] {
                        "morning,1,2,3"});
#line 7
 testRunner.Given("the following input", ((string)(null)), table1, "Given ");
#line 10
 testRunner.When("the server takes the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Output"});
            table2.AddRow(new string[] {
                        "eggs, toast, coffee"});
#line 11
 testRunner.Then("the output should be the following", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Given an order is made where the dish selections are made a in random order, the " +
            "output should still be in the correct order of entree,side, drink and dessert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GrosvenorDevQuiz")]
        public virtual void GivenAnOrderIsMadeWhereTheDishSelectionsAreMadeAInRandomOrderTheOutputShouldStillBeInTheCorrectOrderOfEntreeSideDrinkAndDessert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given an order is made where the dish selections are made a in random order, the " +
                    "output should still be in the correct order of entree,side, drink and dessert", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input"});
            table3.AddRow(new string[] {
                        "morning,2,1,3"});
#line 16
 testRunner.Given("the following input", ((string)(null)), table3, "Given ");
#line 19
 testRunner.When("the server takes the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Output"});
            table4.AddRow(new string[] {
                        "eggs, toast, coffee"});
#line 20
 testRunner.Then("the output is in the following particular order", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Given an order for dessert in the morning,  the output should error out")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GrosvenorDevQuiz")]
        public virtual void GivenAnOrderForDessertInTheMorningTheOutputShouldErrorOut()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given an order for dessert in the morning,  the output should error out", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input"});
            table5.AddRow(new string[] {
                        "morning,1,2,3,4"});
#line 25
 testRunner.Given("the following input", ((string)(null)), table5, "Given ");
#line 28
 testRunner.When("the server takes the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Output"});
            table6.AddRow(new string[] {
                        "eggs, toast, coffee, error"});
#line 29
 testRunner.Then("the output should be the following", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Given an order that only contains and invalid dish selection should give an error" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GrosvenorDevQuiz")]
        public virtual void GivenAnOrderThatOnlyContainsAndInvalidDishSelectionShouldGiveAnError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given an order that only contains and invalid dish selection should give an error" +
                    "", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input"});
            table7.AddRow(new string[] {
                        "morning, 5"});
#line 35
 testRunner.Given("the following input", ((string)(null)), table7, "Given ");
#line 38
 testRunner.When("the server takes the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.Then("the order should give an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Output"});
            table8.AddRow(new string[] {
                        "error"});
#line 40
 testRunner.And("the output should be the following", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Given an order is made that contains both valid and invalid dish selections the o" +
            "rder should process selections correctly up to the error")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GrosvenorDevQuiz")]
        public virtual void GivenAnOrderIsMadeThatContainsBothValidAndInvalidDishSelectionsTheOrderShouldProcessSelectionsCorrectlyUpToTheError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given an order is made that contains both valid and invalid dish selections the o" +
                    "rder should process selections correctly up to the error", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input"});
            table9.AddRow(new string[] {
                        "night, 1,2,15,3"});
#line 45
 testRunner.Given("the following input", ((string)(null)), table9, "Given ");
#line 48
 testRunner.When("the server takes the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
 testRunner.Then("the order should give an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Output"});
            table10.AddRow(new string[] {
                        "steak, potato, error"});
#line 50
 testRunner.And("the following should be the output", ((string)(null)), table10, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Given any order at a particular time of day, only dishes that can be served at th" +
            "at time")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GrosvenorDevQuiz")]
        public virtual void GivenAnyOrderAtAParticularTimeOfDayOnlyDishesThatCanBeServedAtThatTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given any order at a particular time of day, only dishes that can be served at th" +
                    "at time", ((string[])(null)));
#line 55
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input"});
            table11.AddRow(new string[] {
                        "night,1,2,3"});
#line 56
 testRunner.Given("the following input", ((string)(null)), table11, "Given ");
#line 59
 testRunner.When("the server takes the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
 testRunner.Then("the output should not contain any breakfast items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Output"});
            table12.AddRow(new string[] {
                        "steak, potato, wine"});
#line 61
 testRunner.And("the following should be the output", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Given an order containing case insentive input, the order should process without " +
            "error")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GrosvenorDevQuiz")]
        public virtual void GivenAnOrderContainingCaseInsentiveInputTheOrderShouldProcessWithoutError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given an order containing case insentive input, the order should process without " +
                    "error", ((string[])(null)));
#line 66
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input"});
            table13.AddRow(new string[] {
                        "Morning,1,3,2"});
#line 67
 testRunner.Given("the following input", ((string)(null)), table13, "Given ");
#line 70
 testRunner.When("the server takes the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 71
 testRunner.Then("the output should not contain an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Output"});
            table14.AddRow(new string[] {
                        "eggs, toast, coffee"});
#line 72
 testRunner.And("the following should be the output", ((string)(null)), table14, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Given multiple orders for a dish that can be ordered at most one time, then an er" +
            "ror should be output")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GrosvenorDevQuiz")]
        public virtual void GivenMultipleOrdersForADishThatCanBeOrderedAtMostOneTimeThenAnErrorShouldBeOutput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given multiple orders for a dish that can be ordered at most one time, then an er" +
                    "ror should be output", ((string[])(null)));
#line 77
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input"});
            table15.AddRow(new string[] {
                        "night,1,1,2,3,5"});
#line 78
 testRunner.Given("the following input", ((string)(null)), table15, "Given ");
#line 81
 testRunner.When("the server takes the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
 testRunner.Then("the output should contain an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Output"});
            table16.AddRow(new string[] {
                        "steak, error"});
#line 83
 testRunner.And("the following should be the output", ((string)(null)), table16, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Given an order for multiple cups of coffee in the morning, the order should proce" +
            "ss without error")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GrosvenorDevQuiz")]
        public virtual void GivenAnOrderForMultipleCupsOfCoffeeInTheMorningTheOrderShouldProcessWithoutError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given an order for multiple cups of coffee in the morning, the order should proce" +
                    "ss without error", ((string[])(null)));
#line 89
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input"});
            table17.AddRow(new string[] {
                        "morning,1,2,3,3,3"});
#line 90
 testRunner.Given("the following input", ((string)(null)), table17, "Given ");
#line 93
 testRunner.When("the server takes the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
 testRunner.Then("the output should not contain an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Output"});
            table18.AddRow(new string[] {
                        "eggs, toast, coffee(x3)"});
#line 95
 testRunner.And("the output should be the following", ((string)(null)), table18, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Given an order multiple orders of potatoes at night, the order should process wit" +
            "hout error")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GrosvenorDevQuiz")]
        public virtual void GivenAnOrderMultipleOrdersOfPotatoesAtNightTheOrderShouldProcessWithoutError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given an order multiple orders of potatoes at night, the order should process wit" +
                    "hout error", ((string[])(null)));
#line 100
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input"});
            table19.AddRow(new string[] {
                        "night,1,2,2,4"});
#line 101
 testRunner.Given("the following input", ((string)(null)), table19, "Given ");
#line 104
 testRunner.When("the server takes the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 105
 testRunner.Then("the output should not contain an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Output"});
            table20.AddRow(new string[] {
                        "steak, potato(x2), cake"});
#line 106
 testRunner.And("the output should be the following", ((string)(null)), table20, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Given an order delimited by another character other than a comma, the order shoul" +
            "d contain an error")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GrosvenorDevQuiz")]
        public virtual void GivenAnOrderDelimitedByAnotherCharacterOtherThanACommaTheOrderShouldContainAnError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given an order delimited by another character other than a comma, the order shoul" +
                    "d contain an error", ((string[])(null)));
#line 110
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input"});
            table21.AddRow(new string[] {
                        "night,1;2"});
#line 111
 testRunner.Given("the following input", ((string)(null)), table21, "Given ");
#line 114
 testRunner.When("the server takes the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 115
 testRunner.Then("the output should contain an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Output"});
            table22.AddRow(new string[] {
                        "error"});
#line 116
 testRunner.And("the output should be the following", ((string)(null)), table22, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Given an order is input that uses another time of day besides morning or night, t" +
            "he order should not output")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GrosvenorDevQuiz")]
        public virtual void GivenAnOrderIsInputThatUsesAnotherTimeOfDayBesidesMorningOrNightTheOrderShouldNotOutput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given an order is input that uses another time of day besides morning or night, t" +
                    "he order should not output", ((string[])(null)));
#line 120
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input"});
            table23.AddRow(new string[] {
                        "evening,1,2"});
#line 121
 testRunner.Given("the following input", ((string)(null)), table23, "Given ");
#line 124
 testRunner.When("the server takes the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Output"});
            table24.AddRow(new string[] {
                        ""});
#line 125
 testRunner.Then("the output should be the following", ((string)(null)), table24, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
